;  Copyright 2008, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id$
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM 

; Function build a checksum for a given filename.
;
; Assumption:
;
;   1) TBD

FUNCTION create_checksum_file, $
             i_file_to_create_checksum_for, $
             r_checksum_filename

; Load constants.  No ending semicolon is required.

@modis_data_config.cfg

; Returned status.  Value of 0 means ok, 1 means bad.

o_status = SUCCESS;
r_checksum_filename = ""; 

if (~FILE_TEST(i_file_to_create_checksum_for)) then begin
    print,  'create_checksum_file:ERROR, File does not exist.  Cannot generate checksum for:[' + i_file_to_create_checksum_for + ']';
    l_reason = 'File does not exist.  Cannot generate checksum for:' + i_file_to_create_checksum_for;
    l_status = error_log_writer('create_checksum_file',l_reason);
    o_status = FAILURE;
    return, o_status;
endif

; Extract the name only without the directory.

l_filename_only = FILE_BASENAME(i_file_to_create_checksum_for);

;
; Perform the checksum on the zipped file to a temporary file then rename it
; to the name of the .bz2 plus the .md5 extension.
; 

;        print, "  Building the checksum for ", l_filename_only;

call_md5_shell_command_str = "/usr/bin/md5sum ";
str_perform_checksum_on_file = call_md5_shell_command_str + i_file_to_create_checksum_for + $
                                                " | cat ";

;print, "  str_perform_checksum_on_file = [",str_perform_checksum_on_file,"]"

SPAWN, str_perform_checksum_on_file, checksum_line; 

; Something is wrong if the line is empty.

if (STRLEN(checksum_line[0]) EQ 0) then begin
    print, "create_checksum_file: Cannot generate checksum for file:";
    print, "l_filename_only = ", l_filename_only;
    l_reason = 'Cannot generate checksum for:' + l_filename_only;
    l_status = error_log_writer('create_checksum_file',l_reason);
    o_status = FAILURE;
    return, o_status;
endif

; Becareful to split with two spaces as the output of the md5sum produces 2 spaces
; in between the checksum and the filename.

splitted_array = STRSPLIT(checksum_line[0],/EXTRACT);

;help, splitted_array

unique_string = splitted_array[0];  The checksum is the first field.

;help, unique_string
;        print, "create_checksum_file: unique_string = ", unique_string;

; Something is wrong if the line is empty.

if (STRLEN(unique_string) EQ 0) then begin 
    print, "create_checksum_file: Checksum field is empty.";
    print, "l_filename_only = ", l_filename_only;
    o_status = FAILURE;
    return, o_status;
endif 

;
; Remove the directory from the file name.
; 

checked_sum_name_only = FILE_BASENAME(splitted_array[1]);

;print, "create_checksum_file: checked_sum_name_only = ", checked_sum_name_only;

;
; Write the checksum to file with .md5 extension.
; Two spaces in between with no carriage return.
;

check_sum_out_line = unique_string + "  " + checked_sum_name_only;

;print, "create_checksum_file: check_sum_out_line = ", check_sum_out_line;

r_checksum_filename = i_file_to_create_checksum_for + ".md5";
;r_checksum_filename = ""; 

;print, "create_checksum_file: r_checksum_filename = ", r_checksum_filename;
        
OPENW, file_unit, r_checksum_filename, ERROR = err_no, /GET_LUN;

; If err is nonzero, something happened. Print the error message to   
; the standard error file (logical unit -2):  
IF (err_no NE 0) then begin
    print, "create_checksum_file:ERROR, Failed to open file [" + r_checksum_filename + "]";
    PRINTF, -2, !ERROR_STATE.MSG  
    o_status = FAILURE;
    return, o_status;
endif

printf, file_unit, check_sum_out_line; 
FREE_LUN, file_unit

return, o_status;
END
