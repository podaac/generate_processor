;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: modis_ftp_pusher.pro,v 1.4 2007/11/27 23:52:43 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

;
;
; Function pushes various files to melia for QA.
;
; Note: The original code was written in Perl.  Modifed here in IDL to allow it to be called
; as part of the parallel processing in IDL using TaskDL.
;
; Assummption:
;
;   1.  The code are stored under $GHRSST_PERL_LIB_DIRECTORY directory.
;   2.  The scratch area is in: GETENV('SCRATCH_AREA')
;
;
;------------------------------------------------------------------------------------------------

FUNCTION modis_ftp_pusher, $
             i_fr_checksum, $
             i_fr_filename, $
             i_l2p_core_checksum, $
             i_l2p_core_filename


; Return status

over_all_status = 0;

; Get the directory where the c-shell to push the files to melia are stored.

GHRSST_PERL_LIB_DIRECTORY = GETENV("GHRSST_PERL_LIB_DIRECTORY");

;  Find out where sh is stored.
;
;  Location of bin directories as global to be used by functions.  May be different on different
;  machines.  On seaworld, sh is stored in /bin directory.
;

shell_command_str = "/bin/sh";

;
;  
;  Create links to the above 4 input files to shorten the names.  The system command in Perl
;  has an upper limit of the size of the command.
;  
;

scratch_area         = GETENV('SCRATCH_AREA');
l_do_not_care_status = actualize_directory(scratch_area);

l_status = create_unique_links_to_modis_l2p_files($
             scratch_area,$
             i_fr_checksum, $
             i_fr_filename, $
             i_l2p_core_checksum, $
             i_l2p_core_filename, $
             rl_link_to_fr_checksum, $
             rl_link_to_fr_filename, $
             rl_link_to_l2p_core_checksum, $
             rl_link_to_l2p_core_filename);


if (l_status NE 0) then begin
    print, 'modis_ftp_pusher: FATAL, Cannot create links to MODIS L2P files.'
    print, 'modis_ftp_pusher: i_fr_checksum = ', i_fr_checksum 
    print, 'modis_ftp_pusher: i_fr_filename = ', i_fr_filename 
    print, 'modis_ftp_pusher: i_l2p_core_checksum = ', i_l2p_core_checksum 
    print, 'modis_ftp_pusher: i_l2p_core_filename = ', i_l2p_core_filename 
    over_all_status = 1;
    return, over_all_status;
endif

;
;  Save the original names
;

original_filename_array= STRARR(4); We only need 4 strings. 

original_filename_array[0] = i_fr_checksum; 
original_filename_array[1] = i_fr_filename;
original_filename_array[2] = i_l2p_core_checksum;
original_filename_array[3] = i_l2p_core_filename;

;
;  Store the links into a string array.
;

input_name_array = STRARR(4); We only need 4 strings. 

input_name_array[0] = rl_link_to_fr_checksum;
input_name_array[1] = rl_link_to_fr_filename;
input_name_array[2] = rl_link_to_l2p_core_checksum;
input_name_array[3] = rl_link_to_l2p_core_filename;

;
; Store the file type into a string array.  FTP command needs to know the file type.
;

input_file_type_array = STRARR(4);  We only need 4 strings.

input_file_type_array[0] = "ascii"
input_file_type_array[1] = "binary";
input_file_type_array[2] = "ascii"; 
input_file_type_array[3] = "binary";

;
;  Execution status.  Value of 0 means OK, 1 means bad.
;
ftp_status      = 0; 
destination_name = "";

;print, "modis_ftp_pusher: Returning permaturely";
;return, over_all_status;

;  An array to store status for each file transfer.  Success is set to 0
;  Failure is set to 1.
;

file_transfer_status_array = INTARR(4); We need 4 elements to store 4 status. 

; Swapped the ordering of file transfer to push the data file first.
for file_transfer_index = 3,0,-1 do begin

    ;  The name has directory.  Extract just the name.
    
    destination_name = FILE_BASENAME(original_filename_array[file_transfer_index]);
;print, "destination_name [" + destination_name + "]";

    ; Code to push the file to melia. 

if  ((STRUPCASE(GETENV('SEND_MODIS_L2P_TO_MELIA_FLAG'))) EQ 'TRUE') then begin 
    ;
    ; Create the argument lists and call system command.
    ; 

    system_command_string = shell_command_str + " " + GHRSST_PERL_LIB_DIRECTORY + "/putftpfile ghrsst cyclops-12 melia.jpl.nasa.gov JPL/tmp " + input_name_array[file_transfer_index] + " " + destination_name + " " + input_file_type_array[file_transfer_index];

;print , "system_command_string = [" + system_command_string + "]"
;print, "modis_ftp_pusher : system_command_string = [" + system_command_string + "]"
;print, "modis_ftp_pusher : For now, doing nothing."

    SPAWN, system_command_string, run_result, ftp_status;

;print, "modis_ftp_pusher : run_result = [" + run_result + "]"
;print, "modis_ftp_pusher : ftp_status  = [" + ftp_status  + "]"

    ; Check for error in transmission.  A length of greater than zero for ftp_status implies error.
    ; If there is such an error, we flag it in the file_transfer_status_array array.

    if (STRLEN(ftp_status) GT 0) then begin
;print, "modis_ftp_pusher : Error in transmission, setting file_transfer_status_array to 1."
;print, "modis_ftp_pusher : file_transfer_index = ", file_transfer_index
        file_transfer_status_array[file_transfer_index] = 1; 
    endif

endif

    ; Code to push the file to seafire/seatide using gftpin user account.
    ;
    ; Note:
    ;
    ;    Host seafire/seatide uses sftp and does not require the transfer mode and username/password combo
    ;    since public authentication key is used.

if (2 EQ 2) then begin
    ; Create the additional command to push the files to seafire/seatide.
    destination_authentication = '';  
    if (GETENV('SEND_MODIS_L2P_SFTP_AUTHENTICATION_INFO') NE '') then begin
        destination_authentication = GETENV('SEND_MODIS_L2P_SFTP_AUTHENTICATION_INFO'); 
    endif else begin
        print, 'modis_ftp_pusher: FATAL, The environment variable SEND_MODIS_L2P_SFTP_AUTHENTICATION_INFO must be set to a valid value.'
        print, 'modis_ftp_pusher: Cannot push file = ' + destination_name
        over_all_status = 1;
        return, over_all_status;
    endelse

    ; If this is GDS2, we only attempt to transfer the first 2 files.
    if (GETENV('CREATE_MODIS_L2P_IN_GDS2_FORMAT') EQ 'true') then begin
        if ((file_transfer_index EQ 1) OR (file_transfer_index EQ 0)) then begin
            file_transfer_status_array[file_transfer_index] = 0;
            continue;
        endif
    endif

    ;system_command_string = shell_command_str + " " + GHRSST_PERL_LIB_DIRECTORY + "/putsftpfile 'gftpin@seafire.jpl.nasa.gov' JPL/tmp " + input_name_array[file_transfer_index] + " " + destination_name;
    system_command_string = shell_command_str + " " + GHRSST_PERL_LIB_DIRECTORY + "/putsftpfile " + "'" + destination_authentication + "'" + " JPL/tmp " + input_name_array[file_transfer_index] + " " + destination_name;

;    print, "input_name_array = [", input_name_array[file_transfer_index], "]";
;    print, "system_command_string = [", system_command_string, "]";
;    print, "Calling SPAWN";

    SPAWN, system_command_string, run_result, ftp_status;
;    print, "Post SPAWN";

;print, "modis_ftp_pusher : run_result = [" + run_result + "]"
;print, "modis_ftp_pusher : ftp_status  = [" + ftp_status  + "]"

    ; Check for error in transmission. 
    ; If there is such an error, we flag it in the file_transfer_status_array array.

    for lines = 0, (SIZE(ftp_status,/N_ELEMENTS) - 1) do begin
        ; If we found a line containing "No such file", then we have an error.
        ; We also need to check for such line: Couldn't rename file "/home/qchau/JPL/tmp/droplet.txt.out" to "/home/qchau/JPL/tmp/../droplet.txt.out": Failure
        ; The reason for this failure is the file already exist and sftp does not allow a rename to an existing file.
        if (STRMATCH(ftp_status[lines] ,'*No such file*') EQ 1) OR (STRMATCH(ftp_status[lines] ,'*Failure*') EQ 1) then begin
            file_transfer_status_array[file_transfer_index] = 1; 
        endif
    endfor

endif

endfor


;
;  This whole function is considered a failure if one of the files did not get transferred.
;

for file_transfer_index = 0, 3 do begin
     if (file_transfer_status_array[file_transfer_index] EQ 1) then begin 
         over_all_status = 1;
     endif 
endfor

; If something went wrong, try to delete any existing files in the JPL directory
if (over_all_status EQ 1) then begin
    for file_transfer_index = 3,0,-1 do begin
        destination_name = FILE_BASENAME(original_filename_array[file_transfer_index]);
        ; Delete any files in JPL directory so next time it will be able to be moved after the copy to JPL/tmp directory.
        system_command_string = shell_command_str + " " + GHRSST_PERL_LIB_DIRECTORY + "/cleansftpfile " + "'" + destination_authentication + "'" + " JPL/tmp " + destination_name;
        SPAWN, system_command_string, clean_result, clean_status;
    endfor
endif

;
; Remove the temporary links created above.
;

;print, "modis_ftp_pusher : FILE_DELETE = [" + rl_link_to_fr_checksum + "]"
FILE_DELETE, rl_link_to_fr_checksum, /QUIET;

;print, "modis_ftp_pusher : FILE_DELETE = [" + rl_link_to_fr_filename + "]"
FILE_DELETE, rl_link_to_fr_filename, /QUIET;

;print, "modis_ftp_pusher : FILE_DELETE = [" + rl_link_to_l2p_core_checksum + "]"
FILE_DELETE, rl_link_to_l2p_core_checksum, /QUIET;

;print, "modis_ftp_pusher : FILE_DELETE = [" + rl_link_to_l2p_core_filename + "]"
FILE_DELETE, rl_link_to_l2p_core_filename, /QUIET;

;print, "modis_ftp_pusher : over_all_status = (0 good, 1 bad) ", over_all_status 

return, over_all_status;
END
