;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: ghrsst_processing_logger.pro,v 1.1 2007/12/14 16:24:16 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

;
;DESCRIPTION:
;
; This class provides the user the ability to prepare a log entry and send it to the
; GHRSST Processing Log Archive (GPLA). 

;===============================================================================
FUNCTION ghrsst_processing_logger::INIT, $
             i_job_id, $                
             i_date_processed, $
             i_data_filename, $
             i_error_reason, $
             _EXTRA = e

;print, 'entering ghrsst_processing_logger::INIT';

SELF.p_job_id         = i_job_id; 
SELF.p_date_processed = i_date_processed;
SELF.p_data_filename  = i_data_filename;
SELF.p_error_reason   = i_error_reason; 

; Signify that this structure is set, valid for writing out to log file

SELF.p_structure_is_ready = 1; 

;help, SELF.p_job_id
;help, SELF.p_date_processed
;help, SELF.p_data_filename
;help, SELF.p_error_reason

   success   = 1
   failure   = 0

;print, 'leaving ghrsst_processing_logger::INIT';
   RETURN, success
END

;===============================================================================
PRO ghrsst_processing_logger::CLEANUP

;print, 'ghrsst_processing_logger::CLEANUP enter';
;help,/heap
;print, 'ghrsst_processing_logger::CLEANUP leave';

END

;===============================================================================
FUNCTION ghrsst_processing_logger__DEFINE

;print, 'ghrsst_processing_logger:ghrsst_processing_logger__DEFINE';

   struct_error_logger = { ghrsst_processing_logger,    $
        INHERITS ghrsst_base_error_logger,         $
        p_job_id                             : 0L, $
        p_date_processed                     : "", $
        p_data_filename                      : "", $
        p_error_reason                       : "", $
        p_structure_is_ready                 : 0}

;print, 'ghrsst_processing_logger:ghrsst_processing_logger__DEFINE: before returning';

   return, struct_error_logger;
END

;===============================================================================
FUNCTION ghrsst_processing_logger::get_job_id
return, SELF.p_job_id; 
END

;===============================================================================
FUNCTION ghrsst_processing_logger::get_date_processed
return, SELF.p_date_processed; 
END

;===============================================================================
FUNCTION ghrsst_processing_logger::get_data_filename
return, SELF.p_data_filename; 
END

;===============================================================================
FUNCTION ghrsst_processing_logger::get_error_reason
return, SELF.p_error_reason; 
END

;===============================================================================
PRO ghrsst_processing_logger::write_to_log_file

; Program write out the error entry to the GHRSST Error Log Archive (GELA). 
;
; Assumption:
;
; 1.  GELA is stored in $HOME/scratch/ghrsst_error_log_archive.txt
; 2.  If directory $HOME/scratch does not already exist, one will be created.
; 3.  If GELA file does not already exist, an empty one will be created.
;

    log_home = GETENV('SCRATCH_AREA');
    l_do_not_care_status = actualize_directory(log_home);
    log_filename = GETENV('GAPFARMPROCESSINGLOGFILENAME');
    if (log_filename EQ '') then begin
        print, 'ghrsst_processing_logger::write_to_log_file: ERROR, Environment variable LOG_FILENAME must be defined to a file name without a directory.'
        return;
    endif

    processing_filename = log_home + '/' + log_filename;
;    processing_filename = log_home + '/ghrsst_processing_log_archive.txt';

    if (SELF.p_structure_is_ready EQ 0) then begin
        print, 'ghrsst_processing_logger::write_to_log_file: ERROR, Structure is not ready to be written to log file.'
        print, 'ghrsst_processing_logger::write_to_log_file: Some or all of fields are not set.'
    endif else begin

        ;
        ; Create $HOME/scratch/ directory if it does not exist yet.
        ;

        if (FILE_TEST(log_home,/DIRECTORY)) then begin
;            print, 'ghrsst_processing_logger::write_to_log_file: do nothing, directory is already there.'
        endif else begin
;            print, 'ghrsst_processing_logger::write_to_log_file: Warning, will be creating directory ', log_home;
            FILE_MKDIR,log_home;
        endelse

        ;
        ; Touch the log file if none exist yet.
        ;

        if (~FILE_TEST(processing_filename)) then begin
            SPAWN, 'touch ' + processing_filename 
        endif

        ; Get machine name so we can append it to the message.
        machine_name = STRTRIM(GETENV("HOST"),2);

        system_command_string = 'echo "' + STRTRIM(STRING(SELF.p_job_id),2) + ',' + $
               STRTRIM(SELF.p_date_processed,2) + ',' + $
               STRTRIM(SELF.p_data_filename,2)  + ',' + $
               STRTRIM(SELF.p_error_reason,2)         + $
               ', ' + machine_name + $
               '"' + '>> ' + processing_filename;

        ;
        ; Lock the named resource.
        ;

        MY_LOCK_NAME = 'GPLA_SEMAPHORE'; 

        l_grab_status = lock_named_resource(MY_LOCK_NAME);

;
; Put a wait to test the locking mechanism.  Run this program on two different windows
;

;print, 'ghrsst_processing_logger::write_to_log_file: Waiting 5 seconds.'
;WAIT, 5;

        if (l_grab_status EQ 0) then begin
            print, 'ghrsst_processing_logger::write_to_log_file: WARNING, Cannot lock the semaphore with name: ', MY_LOCK_NAME;
            ;print, 'Will exit IDL';
            ;EXIT
            return;
        endif

;print, system_command_string

        SPAWN, system_command_string, run_result, error_status;

        if (STRLEN(error_status) GT 0) then begin
            print, "ghrsst_processing_logger::write_to_log_file: ERROR, Cannot append error entry to " + processing_filename;
            print, "system_command_string = [" + system_command_string + "]";
        endif

        ; Release the named resource.

        release_named_resource, MY_LOCK_NAME;

        ;
        ; Use commas to separate the fields.  Use STRTRIM to remove leading and trailing blanks.
        ;
;        print, FORMAT='(I10, "," ,A, "," ,A, "," ,A)', $
;               SELF.p_job_id, $
;               STRTRIM(SELF.p_date_processed,2), $
;               STRTRIM(SELF.p_data_filename,2), $
;               STRTRIM(SELF.p_error_reason,2)
    endelse
END
