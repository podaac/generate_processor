;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: farm_submit_tasks.pro,v 1.1 2007/05/01 17:39:41 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CVS

FUNCTION farm_submit_tasks, $
         i_tasks_array

; Program receives an array of strings containing the IDL programs to submit to TaskDL
; for execution.
;
; Assumptions:
;
; 1.  The global share variable s_farm_handle is a valid variable, i.e. the TaskDL server
;     has been started on the main node.
; 2.  The strings representing the IDL program calls contains the correct format. 
;

; These common variables allow other related functions to use the shared TaskDL objects.
; 

COMMON SHARE_MEMORY, s_farm_handle;    Static s_farm_handle is shared between IDL subroutines.

tstart = systime(1)
print, 'farm_submit_tasks: execution start time:', systime()

SUCCESS = 0;
FAILURE = 1;

over_all_status = SUCCESS;

;
; Get size of input argument.
;

size_array = size(i_tasks_array);

; Info:
;
; [0] = number of dimensions 
; [1] = size of each dimension (one element per dimension] 

num_dimensions = size_array[0];
num_tasks      = size_array[1];

;help, num_dimensions
;help, num_tasks

EXPECTED_DIMENSIONS = 1;     The string array being passed in is only one dimension.

;
; Return immediately if the string array does not contain the correct dimension.
;

if (num_dimensions NE EXPECTED_DIMENSIONS) then begin
    print, 'farm_submit_tasks: ERROR, The input string is of incorrect dimension.';
    print, 'farm_submit_tasks: num_dimensions      = ', num_dimensions; 
    print, 'farm_submit_tasks: EXPECTED_DIMENSIONS = ', EXPECTED_DIMENSIONS;

    l_status = error_log_writer($
        'farm_submit_tasks',$
        'i_tasks_array num_dimensions = ' + STRTRIM(STRING(num_dimensions),2) + $
        ' expected = ' +  STRTRIM(STRING(EXPECTED_DIMENSIONS),2));

    over_all_status = FAILURE; 
    return, over_all_status;
endif

;
; Loop through each entry in the input array and pass the string to the worker.
;

DEFAULT_STAGE = 1;
EXPECTED_MAX_TOKENS = 2;

idl_command_str = ""; 
stage_number    = 0;
largest_stage   = DEFAULT_STAGE;

for task_num = 0, num_tasks - 1 do begin

  ; Split the processing job on ":".  The stage number is to the right of ":". 

  splitted_array = STRSPLIT(i_tasks_array[task_num],":",/EXTRACT);  
  
  num_tokens = size(splitted_array,/N_ELEMENTS);

  ; Handle the case where the stage is not specified.

  if (num_tokens EQ 1) then begin
      ;
      ; No stage is given, the element in i_tasks_array[task_num] is the task itself. 
      ; Set the stage_number to the default stage.
      ;
      idl_command_str = splitted_array[0];
      stage_number    = DEFAULT_STAGE;
;print, 'farm_submit_tasks:idl_command_str = [',idl_command_str,']'
;print, 'farm_submit_tasks:stage_number    = [',stage_number,']'
  endif else begin

      ;
      ; We get 2 tokens, get the job and the stage number.
      ;

      if (num_tokens EQ EXPECTED_MAX_TOKENS) then begin
          idl_command_str =     splitted_array[0]; 
          stage_number    = FIX(splitted_array[1]);  Must convert the stage from string to integer.

          ; Keep track of the largest stage number for use in advancing the stage.
          if (stage_number GT largest_stage) then begin
              largest_stage = stage_number;
          endif 
      endif else begin
          ;
          ; More than 2 tokens is an error.
          ;
          print, 'farm_submit_tasks: ERROR, Only expecting ', EXPECTED_MAX_TOKENS, ' tokens from the task array.';
          print, 'farm_submit_tasks: num_tokens = ', num_tokens; 

          l_status = error_log_writer($
               'farm_submit_tasks',$
               'num_tokens = ' + STRTRIM(STRING(num_tokens),2) + $
               ' expected = ' +  STRTRIM(STRING(EXPECTED_MAX_TOKENS),2));

          over_all_status = FAILURE; 
          return, over_all_status;
      endelse
  endelse

  ;
  ; Build the IDL command string.
  ;
  ; Note: 
  ;
  ;      1. To pass string parameters into add_task(),
  ;         they must have been enclosed in single quotes.
  ;      2. No checking is done for correct format.
  ;

  ; Create a catch block to catch error(s)

  CATCH, error_status
  if (error_status NE 0) then begin
      CATCH, /CANCEL
      print, 'farm_submit_tasks: ERROR, Failed in add_task.'
      print, 'idl_command_str = ', idl_command_str 

      l_status = error_log_writer($
               'farm_submit_tasks',$
               'Failed in add_task: ' + idl_command_str);

      over_all_status = FAILURE;

      ; From reference manual:
      ;
      ; "Remove all tasks from all queues on the TaskDL server.  
      ; This creates a "clean slate" to start an entirely new workflow or to recover from errors.
      ;

      s_farm_handle->reset_server
      print, 'farm_submit_tasks: obj_destroy() called' 
      obj_destroy, s_farm_handle
      CATCH, /CANCEL

      ; Must return immediately.
      return, over_all_status;
  endif

  ;
  ; Each farmer (host) gets a job.
  ;

  ;
  ; Only use the STAGE parameter it is different the default.
  ;

  if (stage_number EQ DEFAULT_STAGE) then begin
      s_farm_handle->add_task, idl_command_str;
  endif else begin
      s_farm_handle->add_task, idl_command_str, STAGE=stage_number;
  endelse
  CATCH, /CANCEL

  ;
  ; Checking to see if the queue started OK 
  ;

  ;s_farm_handle->list_queue

endfor

; Advance the stage if the largest stage is greater than the default stage.

if (largest_stage GT DEFAULT_STAGE) then begin
    s_farm_handle->advance_stage, STAGE=largest_stage;
endif 

print, 'Overall execution time:', systime(1) - tstart
help,/heap

;
; Close up shop.
;

return, over_all_status;
END
