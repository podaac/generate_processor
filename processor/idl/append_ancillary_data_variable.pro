;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: append_ancillary_data_variable.pro,v 1.1 2007/11/13 16:41:37 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

FUNCTION append_ancillary_data_variable, $
         i_filled_quicklook_filename, $
         i_variable_name, $
         i_refined_filename, $
         i_day_or_night, $
         i_start_node, $
         i_end_node

; Function read one variable from the filled Quicklook MODIS L2P and write it to the
; "newly" created Refined MODIS L2P file along with all its attributes.
;
; The variable represents ancillary data such as: 
;
;     aerosol_optical_depth
;     DT_analysis
;     sea_ice_fraction
;     surface_solar_irradiance
;     wind_speed
;
; Assumptions:
;
;   1. The input NetCDF file exist (filled Quicklook MODIS L2P).
;   2. The output NetCDF file exist.   The content of the Refined MODIS L2P has mostly
;      been written except for the ancillary data being added by this function.
;   3. The global attribute 'comment' will be replaced.
;   4. The variable type is byte.
;   5. The variable has not been written before.  If it is, we will not write it again.
;
;------------------------------------------------------------------------------------------------

; Load constants.

@data_const_config.cfg

; Define returned variable(s).

o_status = SUCCESS;

;
; Open the Filled MODIS NetCDF file as input. 
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Cannot open file for input.'
    print, i_filled_quicklook_filename 
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_filled_quicklook_file_id= ncdf_open(i_filled_quicklook_filename,/NOWRITE);
CATCH, /CANCEL

;
; Return immediately if the ancillary variable does not exist.
;
l_variable_id = ncdf_varid(l_filled_quicklook_file_id, i_variable_name);
CATCH, /CANCEL

if (l_variable_id EQ -1) then begin
    print, 'append_ancillary_data_variable: INFO, Variable name does not exist: [' + i_variable_name + ']';
;    print, 'append_ancillary_data_variable: Variable will not be appended.';

;    print, STRING('i_filled_quicklook_filename = ' + i_filled_quicklook_filename);

    ; Don't forget to close the opened file. 
    ncdf_close, l_filled_quicklook_file_id
;print, 'append_ancillary_data_variable: closing l_filled_quicklook_file_id = ', l_filled_quicklook_file_id 

    o_status = SUCCESS;
    ; Must return immediately.
    return, o_status
endif

;
; Continue as normal.
;

;
; Open NetCDF file for update. 
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Cannot open file for update: ' + i_refined_filename;

    ; Don't forget to close the opened file. 
    ncdf_close, l_filled_quicklook_file_id
;print, 'append_ancillary_data_variable: closing l_filled_quicklook_file_id = ', l_filled_quicklook_file_id

    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_refined_file_id = ncdf_open(i_refined_filename,/WRITE);
CATCH, /CANCEL

;
; To prevent the variable from being written to the output file more than once, we
; check to make sure the variable does not exist already in the file.  NetCDF returns -1 if
; it does not exist.  This is what we want to get.  If it exist already, we close
; the input and output files and return.
;

l_variable_id = ncdf_varid(l_refined_file_id, i_variable_name);
CATCH, /CANCEL

;print, 'append_ancillary_data_variable: l_variable_id = ', l_variable_id
if (l_variable_id EQ -1) then begin
;    print, 'append_ancillary_data_variable: INFO, Variable name does not exist yet: [', i_variable_name, ']';
;    print, 'append_ancillary_data_variable: Variable can be appended.';
endif else begin
    print, 'append_ancillary_data_variable: ERROR, Variable name has been written before: [' + i_variable_name + ']';
;    print, 'append_ancillary_data_variable: Variable will not be appended.';

    ; Don't forget to close the opened files. 
    ncdf_close, l_filled_quicklook_file_id
    ncdf_close, l_refined_file_id

;print, 'append_ancillary_data_variable: closing l_filled_quicklook_file_id = ', l_filled_quicklook_file_id
;print, 'append_ancillary_data_variable: closing l_refined_file_id = ', l_refined_file_id 

    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endelse

; Get the variable ids of nj, ni and time.

l_nj_dim_id   = ncdf_dimid(l_refined_file_id,'nj');
l_ni_dim_id   = ncdf_dimid(l_refined_file_id,'ni');
l_time_dim_id = ncdf_dimid(l_refined_file_id,'time');

;
; Put output file into define mode for writing:
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Cannot set output file into define mode:' + i_refined_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
ncdf_control, l_refined_file_id, /REDEF
CATCH, /CANCEL

;
; Define the output variable for writing.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Cannot define output variable: ',i_variable_name;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_refined_varid = ncdf_vardef(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /byte)
CATCH, /CANCEL

;
; Get the input variable id.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Cannot retrieve dataset id for dataset. Name = ', i_variable_name;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_variable_id = ncdf_varid(l_filled_quicklook_file_id, i_variable_name);
CATCH, /CANCEL

;
; Get the input variable array. 
;
CATCH, error_status
if (error_status NE 0) then begin
     CATCH, /CANCEL
     print, 'append_ancillary_data_variable: ERROR, Cannot retrieve dataset from input file.'
     print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
     o_status = FAILURE;
     ; Must return immediately.
     return, o_status;
endif
ncdf_varget, l_filled_quicklook_file_id, l_variable_id,  variable_array;
CATCH, /CANCEL
;help, variable_array

;
; Get all the accompanying attributes.
;
CATCH, error_status
if (error_status NE 0) then begin
     CATCH, /CANCEL
     print, 'append_ancillary_data_variable: ERROR, Cannot retrieve attribute structure.'
     print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
     o_status = FAILURE;
     ; Must return immediately.
     return, o_status;
endif

;
; Get the number of attributes from the filled Quicklook MODIS L2P variable.
;

variable_info_structure = ncdf_varinq(l_filled_quicklook_file_id, l_variable_id);
CATCH, /CANCEL
l_num_attributes = variable_info_structure.natts

;print, 'append_ancillary_data_variable: l_num_attributes = ', l_num_attributes;
    
;
; Get each variable attribute name/value and write it to file. 
;

for attribute_index = 0, l_num_attributes - 1 do begin

    ;
    ; Load the attribute name in attribute name array;
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable: ERROR, Failed in ncdf_attname()'
        print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable: attribute_index = ', attribute_index;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    l_attribute_name = ncdf_attname(l_filled_quicklook_file_id, l_variable_id, attribute_index);
    CATCH, /CANCEL

    ;
    ;Get the attribute value.
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable: ERROR, Failed in ncdf_attget()'
        print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable: attribute_index = ', attribute_index;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    ncdf_attget, l_filled_quicklook_file_id, l_variable_id, l_attribute_name, l_attribute_value;
    CATCH, /CANCEL

    ;
    ; Inquire about the file attribute name and types.
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable: ERROR, Failed in ncdf_attinq()'
        print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable: attribute_index = ', attribute_index;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    result = ncdf_attinq(l_filled_quicklook_file_id, l_variable_id, l_attribute_name)
    CATCH, /CANCEL

    ; Convert the CHAR attribute to STRING before writing.  NetCDF stores STRING variables
    ; as a series of bytes.
     ;
    ; Other data types are left as is. 
 
    if (result.DataType eq "CHAR") then begin
        l_attribute_value = STRING(l_attribute_value);
    endif else begin
;        print, 'append_ancillary_data_variable: result.DataType = [',result.DataType,'] l_attribute_name = [',l_attribute_name,']'
    endelse

    ;
    ; Write the variable attribute to Refined MODIS L2P file.
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable: ERROR, Failed in ncdf_attput()'
        print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable: attribute_index = ', attribute_index;
        print, 'append_ancillary_data_variable: l_attribute_name  = ', l_attribute_name;
        print, 'append_ancillary_data_variable: l_attribute_value = ', l_attribute_value;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    ncdf_attput, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value
    CATCH, /CANCEL

;   print, "Will be writing attribute [", l_attribute_name, "] with value [", l_attribute_value, "]";

endfor

;
; Changed file mode for writing an output variable.
;
CATCH, error_status
if (error_status NE 0) then begin
   CATCH, /CANCEL
   print, 'append_ancillary_data_variable: ERROR, Failed in ncdf_control()'
   print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
   o_status = FAILURE;
   ; Must return immediately.
   return, o_status;
endif
ncdf_control, l_refined_file_id, /ENDEF
CATCH, /CANCEL

;
; Write the output variable to output file.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Failed in ncdf_varput()'
    print, 'append_ancillary_data_variable: i_variable_name = ', i_variable_name;
    print, 'append_ancillary_data_variable: l_refined_file_id = ', l_refined_file_id;
    print, 'append_ancillary_data_variable: l_refined_varid = ', l_refined_varid 
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status;
endif
ncdf_varput, l_refined_file_id, l_refined_varid, variable_array;
CATCH, /CANCEL

;
; Put output file into define mode for writing global attribute.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR, Cannot put output file into define mode:' + i_refined_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
ncdf_control, l_refined_file_id, /REDEF
CATCH, /CANCEL

;
; Build the global comment attribute.
;
l_warning = "; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value";

l_refined_comment = 'L2P Core with DT analysis and other ancillary fields';

l_comment = l_refined_comment + "; " + i_day_or_night + ', Start Node:' + i_start_node $
          + ', End Node:' $
          + i_end_node + l_warning + "; Refined" ;

;
; Update the comment global attribute.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable: ERROR,  Cannot write global attribute comment.' 
    print, 'append_ancillary_data_variable: i_variable_name   = ', i_variable_name;
    print, 'append_ancillary_data_variable: l_refined_file_id = ', l_refined_file_id;
    print, 'append_ancillary_data_variable: l_refined_varid   = ', l_refined_varid
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status;
endif
ncdf_attput, l_refined_file_id, /GLOBAL, 'comment', l_comment;
CATCH, /CANCEL

; ---------- Close up shop ---------- 

ncdf_close, l_filled_quicklook_file_id
ncdf_close, l_refined_file_id;
return, o_status
END
