;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: ghrsst_error_logger.pro,v 1.2 2007/12/14 16:24:15 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

;
;DESCRIPTION:
;
; This class provides the user the ability to prepare an error entry and send it to the
; GHRSST Error Log Archive (GELA). 

;===============================================================================
FUNCTION ghrsst_error_logger::INIT, $
             i_job_id, $                
             i_date_processed, $
             i_data_filename, $
             i_error_reason, $
             _EXTRA = e

;print, 'entering ghrsst_error_logger::INIT';

SELF.p_job_id         = i_job_id; 
SELF.p_date_processed = i_date_processed;
SELF.p_data_filename  = i_data_filename;
SELF.p_error_reason   = i_error_reason; 

; Signify that this structure is set, valid for writing out to log file

SELF.p_structure_is_ready = 1; 

;help, SELF.p_job_id
;help, SELF.p_date_processed
;help, SELF.p_data_filename
;help, SELF.p_error_reason

   success   = 1
   failure   = 0

;print, 'leaving ghrsst_error_logger::INIT';
   RETURN, success
END

;===============================================================================
PRO ghrsst_error_logger::CLEANUP

;print, 'ghrsst_error_logger::CLEANUP enter';
;help,/heap
;print, 'ghrsst_error_logger::CLEANUP leave';

END

;===============================================================================
FUNCTION ghrsst_error_logger__DEFINE

;print, 'ghrsst_error_logger:ghrsst_error_logger__DEFINE';

   struct_error_logger = { ghrsst_error_logger,    $
        INHERITS ghrsst_base_error_logger,         $
        p_job_id                             : 0L, $
        p_date_processed                     : "", $
        p_data_filename                      : "", $
        p_error_reason                       : "", $
        p_structure_is_ready                 : 0}

;print, 'ghrsst_error_logger:ghrsst_error_logger__DEFINE: before returning';

   return, struct_error_logger;
END

;===============================================================================
FUNCTION ghrsst_error_logger::get_job_id
return, SELF.p_job_id; 
END

;===============================================================================
FUNCTION ghrsst_error_logger::get_date_processed
return, SELF.p_date_processed; 
END

;===============================================================================
FUNCTION ghrsst_error_logger::get_data_filename
return, SELF.p_data_filename; 
END

;===============================================================================
FUNCTION ghrsst_error_logger::get_error_reason
return, SELF.p_error_reason; 
END

;===============================================================================
PRO ghrsst_error_logger::write_to_log_file

; Program write out the error entry to the GHRSST Error Log Archive (GELA). 
;
; Assumption:
;
; 1.  GELA is stored in $SCRATCH_AREA/ghrsst_error_log_archive.txt
; 2.  If directory $SCRATCH_AREA does not already exist, one will be created.
; 3.  If GELA file does not already exist, an empty one will be created.
;

    debug_module = 'ghrsst_error_logger::write_to_log_file:';
    debug_mode = 0;
    if (STRUPCASE(GETENV('GHRSST_MODIS_L2P_DEBUG_MODE')) EQ 'TRUE') then begin
        debug_mode = 1;
    endif

    if (debug_mode) then begin
        print, debug_module + 'Entering function.';
    endif

    log_home = GETENV('SCRATCH_AREA');
    l_do_not_care_status = actualize_directory(log_home);
    gela_filename = log_home + '/ghrsst_error_log_archive.txt';

    if (SELF.p_structure_is_ready EQ 0) then begin
        print, 'ghrsst_error_logger::write_to_log_file: ERROR, Structure is not ready to be written to log file.'
        print, 'ghrsst_error_logger::write_to_log_file: Some or all of fields are not set.'
    endif else begin

        ;
        ; Create $HOME/scratch/ directory if it does not exist yet.
        ;

        if (FILE_TEST(log_home,/DIRECTORY)) then begin
;            print, 'ghrsst_error_logger::write_to_log_file: do nothing, directory is already there.'
        endif else begin
;            print, 'ghrsst_error_logger::write_to_log_file: Warning, will be creating directory ', log_home;
            FILE_MKDIR,log_home;
        endelse

        ;
        ; Touch the log file if none exist yet.
        ;

        if (~FILE_TEST(gela_filename)) then begin
            SPAWN, 'touch ' + gela_filename 
            if (debug_mode) then begin
                print, debug_module + 'File ' + gela_filename + ' does not exist yet.   Creating an empty file.';
            endif
        endif else begin
            if (debug_mode) then begin
                print, debug_module + 'File ' + gela_filename + ' does exist.   Will be using for logging.';
            endif
        endelse

        system_command_string = 'echo "' + STRTRIM(STRING(SELF.p_job_id),2) + ',' + $
               STRTRIM(SELF.p_date_processed,2) + ',' + $
               STRTRIM(SELF.p_data_filename,2)  + ',' + $
               STRTRIM(SELF.p_error_reason,2)         + $
               '"' + '>> ' + gela_filename;

        if (debug_mode) then begin
            print, debug_module + 'system_command_string = [' + system_command_string + ']';
        endif

        ;
        ; Lock the named resource.
        ;

        MY_LOCK_NAME = 'GELA_SEMAPHORE'; 

        l_grab_status = lock_named_resource(MY_LOCK_NAME);

;
; Put a wait to test the locking mechanism.  Run this program on two different windows
;

;print, 'ghrsst_error_logger::write_to_log_file: Waiting 5 seconds.'
;WAIT, 5;

        if (l_grab_status EQ 0) then begin
            print, 'ghrsst_error_logger::write_to_log_file: WARNING, Cannot lock the semaphore with name: ', MY_LOCK_NAME;
            ;print, 'Will exit IDL';
            ;EXIT
            return;
        endif

;print, system_command_string

        SPAWN, system_command_string, run_result, error_status;

        if (STRLEN(error_status) GT 0) then begin
            print, "ghrsst_error_logger::write_to_log_file: ERROR, Cannot append error entry to " + gela_filename;
            print, "system_command_string = [" + system_command_string + "]";
        endif

        ; Release the named resource.

        release_named_resource, MY_LOCK_NAME;

        ;
        ; Use commas to separate the fields.  Use STRTRIM to remove leading and trailing blanks.
        ;
;        print, FORMAT='(I10, "," ,A, "," ,A, "," ,A)', $
;               SELF.p_job_id, $
;               STRTRIM(SELF.p_date_processed,2), $
;               STRTRIM(SELF.p_data_filename,2), $
;               STRTRIM(SELF.p_error_reason,2)
    endelse

    if (debug_mode) then begin
        print, debug_module + 'Leaving function.';
    endif
END
