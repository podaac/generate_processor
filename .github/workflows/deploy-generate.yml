# Main build pipeline that verifies, builds, and deploys the software
name: Build and Deploy
# Events that trigger the workflow
on:
  # Trigger based on push to all branches
  push:
    branches:
      - 'development'
      - 'feature/**'
      - 'release/**'
      - 'main'
    tags-ignore:
      - '*'
  # Run workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables
env:
  APP_NAME_ENV: 'processor'

jobs:
  build:
    name: Build and Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest    
    steps:

      # SIT environment variables
      - name: Set Environment Variables
        if: |
          startsWith(github.ref, 'refs/heads/development') ||
          startsWith(github.ref, 'refs/heads/feature')
        run: |
          echo "TARGET_ENV=SIT" >> $GITHUB_ENV
          echo "PREFIX_ENV=service-generate-sit" >> $GITHUB_ENV
      
      # UAT environment variables
      - name: Set Environment Variables
        if: startsWith(github.ref, 'refs/heads/release') 
        run: |
          echo "TARGET_ENV=UAT" >> $GITHUB_ENV
          echo "PREFIX_ENV=service-generate-uat" >> $GITHUB_ENV

      # OPS environment variables
      - name: Set Environment Variables
        if: startsWith(github.ref, 'refs/heads/main') 
        run: |
          echo "TARGET_ENV=OPS" >> $GITHUB_ENV
          echo "PREFIX_ENV=service-generate-ops" >> $GITHUB_ENV

      # Check out GitHub repo
      - uses: actions/checkout@v3

      # SNYK IAC scan and report
      - name: Run Snyk IAC to test and report
        uses: snyk/actions/iac@master
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: >
              --org=${{ secrets.SNYK_ORG_ID }}
              --severity-threshold=high
              --report

      # Configure credentials 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV)] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV)] }}
          aws-region: us-west-2

      # Download IDL installer and license file
      - name: IDL Installation Prep
        run: deploy/deploy-idl.sh ${TARGET_ENV} s3://${PREFIX_ENV}-idl-client

      # Login and define registry, repository, and tag names
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      - name: Define ECR registry, repository, and image tag names
        run : |
          echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "REPOSITORY=${PREFIX_ENV}-${APP_NAME_ENV}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      # Create ECR repository (if it does not exist)
      - name: Create AWS ECR Repository
        run: deploy/deploy-ecr.sh $REGISTRY $REPOSITORY

      # Build and push AWS Batch job container
      - name: Build and Push to AWS ECR
        env:
          IDL_INSTALLER_ENV: ${{ secrets.IDL_INSTALLER }}
          IDL_VERSION_ENV: ${{ secrets.IDL_VERSION }}
        run: |
          docker build --build-arg IDL_INSTALLER=$IDL_INSTALLER_ENV \
            --build-arg IDL_VERSION=$IDL_VERSION_ENV \
            -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Clean up IDL files
      - name: IDL Clean Up
        run: deploy/deploy-clean.sh

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.3.7
      
      - name: Define TF_VAR values
        run: |
          echo "TF_VAR_environment=$TARGET_ENV" >> $GITHUB_ENV
          echo "TF_VAR_prefix=$PREFIX_ENV" >> $GITHUB_ENV

      - name: Initialize Terraform
        working-directory: terraform/
        run: |
          terraform init -reconfigure \
              -backend-config="bucket=${PREFIX_ENV}-tf-state" \
              -backend-config="key=${APP_NAME_ENV}.tfstate" \
              -backend-config="region=${AWS_DEFAULT_REGION}"

      - name: Validate Terraform
        working-directory: terraform/
        run: terraform validate -no-color

      # Deploy AWS infrastructure
      - name: Deploy Terraform
        working-directory: terraform/
        run: terraform apply -auto-approve
