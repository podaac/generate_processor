;  Copyright 2014, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id$
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

FUNCTION get_netcdf_variable_attribute_info,$
             i_file_id,$
             i_variable_name,$
             o_attribute_info

; Function returns a list of the attributes and values associated with a variable from NetCDF4 file.
; If i_variable_name is not defined or empty string, function will return global attributes.
;
; Assumptions:
;
;   1. The NetCDF4 file exist and is opened.  The i_file_id is valid.
;

;------------------------------------------------------------------------------------------------

; Load constants.

@data_const_config.cfg

; Define local variables.

o_read_status = SUCCESS;
debug_flag = 0;

;print, 'get_netcdf_variable_attribute_info: INFO, i_file_id = ', i_file_id
;print, 'get_netcdf_variable_attribute_info: INFO, i_variable_name = ',i_variable_name 

; Set default return value.
o_attribute_info = ''

; Get attribute information
if i_variable_name eq '' then begin
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'get_netcdf_variable_attribute_info: ERROR, Function NCDF_INQUIRE failed to return file info for file id ' + STRTRIM(STRING(i_file_id),2);
        o_read_status = FAILURE;
        ; Must return immediately.
        return, o_read_status
    endif

    fileinfo = NCDF_INQUIRE(i_file_id)
    CATCH, /CANCEL
    num_attributes = fileinfo.NGATTS;
endif else begin
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'get_netcdf_variable_attribute_info: ERROR, Function NCDF_VARID failed to return variable id for variable name ' + i_variable_name;
        o_read_status = FAILURE;
        ; Must return immediately.
        return, o_read_status
    endif

    varid   = NCDF_VARID(i_file_id, i_variable_name);
;print, 'get_netcdf_variable_attribute_info: INFO, varid = ', varid;
    CATCH, /CANCEL

    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'get_netcdf_variable_attribute_info: ERROR, Function NCDF_VARINQ failed to return variable info file id  ' +  STRTRIM(STRING(i_file_id),2) + ' variable id ' +  STRTRIM(STRING(varid),2); 
        o_read_status = FAILURE;
        ; Must return immediately.
        return, o_read_status
    endif

    varinfo = NCDF_VARINQ(i_file_id, varid);
    CATCH, /CANCEL

    ;help, varinfo;
    ;help, varinfo, /STRUCT;
    num_attributes = varinfo.NATTS;
endelse

; If attributes were found, get all the attribute names.
;print, 'get_netcdf_variable_attribute_info: INFO, num_attributes = ', num_attributes;

if (num_attributes GT 0) then begin
    o_attribute_info = STRARR(num_attributes);  Create enough room to hold all the attributes.
    if (debug_flag) then begin
        print, 'SIZE(o_attribute_info,/N_ELEMENTS) = ', SIZE(o_attribute_info,/N_ELEMENTS);
    endif
    for index = 0, num_attributes - 1 do begin
        code_path_took = '';
        if (debug_flag) then begin
            print, 'get_netcdf_variable_attribute_info: INFO, index = ', index;
        endif
        CATCH, error_status
        if (error_status NE 0) then begin
            CATCH, /CANCEL
            if i_variable_name eq '' then begin
                print, 'get_netcdf_variable_attribute_info: ERROR, Cannot retrieve dataset id for variable name ' + i_variable_name + " index " + STRTRIM(STRING(index),2);
            endif else begin
                print, 'get_netcdf_variable_attribute_info: ERROR, Cannot retrieve dataset id for variable name ' + i_variable_name + " index " + STRTRIM(STRING(index),2) + " varid " + STRTRIM(STRING(varid),2);
            endelse
            o_read_status = FAILURE;
            ; Must return immediately.
            return, o_read_status
        endif

        if i_variable_name eq '' then begin
            attribute_name = NCDF_ATTNAME(i_file_id, index, /GLOBAL);
        endif else begin
            attribute_name = NCDF_ATTNAME(i_file_id, varid, index);
        endelse
        CATCH, /CANCEL
        if (debug_flag) then begin
            print, 'get_netcdf_variable_attribute_info: INFO, attribute_name = ', attribute_name;
        endif

        ; Now get the attribute value

        CATCH, error_status
        if (error_status NE 0) then begin
            CATCH, /CANCEL
            if i_variable_name eq '' then begin
                print, 'get_netcdf_variable_attribute_info: ERROR, Cannot retrieve dataset id for variable name ' + i_variable_name + " index " + STRTRIM(STRING(index),2);
            endif else begin
                print, 'get_netcdf_variable_attribute_info: ERROR, Cannot retrieve dataset id for variable name ' + i_variable_name + " index " + STRTRIM(STRING(index),2) + " varid " + STRTRIM(STRING(varid),2);
            endelse
            o_read_status = FAILURE;
            ; Must return immediately.
            return, o_read_status
        endif

        attribute_actual_data_type = '';
        attribute_actual_data_length = 0;
        if i_variable_name eq '' then begin
            NCDF_ATTGET,i_file_id, attribute_name, attribute_value, /GLOBAL;
        endif else begin
            NCDF_ATTGET,i_file_id, varid, attribute_name,attribute_value;
            ; Get the actual data type stored by IDL.
            attribute_info = NCDF_ATTINQ(i_file_id,varid,attribute_name);  Returns the structure attribute_info containing 2 fields: datatype and length.
            attribute_actual_data_type   = attribute_info.datatype;        This will be CHAR for strings which were written as a series of bytes.
            attribute_actual_data_length = attribute_info.length;
        endelse
        CATCH, /CANCEL
        if (debug_flag) then begin
            print, 'get_netcdf_variable_attribute_info: INFO, attribute_value = ', attribute_value;
        endif

        ; Get the attribute type as well.

        attribute_type = SIZE(attribute_value,/TNAME); 
        if (debug_flag) then begin
            print, 'get_netcdf_variable_attribute_info: INFO, attribute_type = ', attribute_type;
        endif

        ; Everything is OK, we can now save the attribute name, attribute type and attribute value.
        ; Notes:
        ;    1. that we use the '|' as a delimiter between each field.  The client code should parse them
        ;    2. We also have to change any attribute value to string since we use the concatenation operator.


        ; If the type is BYTE, we may have to do a tweak since you can't do a direct BYTE to STRING casting.
;        print, 'get_netcdf_variable_attribute_info: INFO, attribute_name = ', attribute_name;
;        print, 'get_netcdf_variable_attribute_info: INFO, attribute_type = ', attribute_type;
;        print, 'get_netcdf_variable_attribute_info: INFO, attribute_value= ', attribute_value;
        if (debug_flag) then begin
           print, 'get_netcdf_variable_attribute_info: INFO, SIZE(attribute_value,/DIMENSIONS) = ', SIZE(attribute_value,/DIMENSIONS);
           print, 'get_netcdf_variable_attribute_info: INFO, SIZE(attribute_value,/N_DIMENSIONS) = ', SIZE(attribute_value,/N_DIMENSIONS);
           print, 'get_netcdf_variable_attribute_info: INFO, SIZE(attribute_value,/N_ELEMENTS) = ', SIZE(attribute_value,/N_ELEMENTS);
        endif

;print, attribute_type;
;print, SIZE(attribute_value,/N_DIMENSIONS);
;stop;

        if (attribute_type EQ 'BYTE') AND (SIZE(attribute_value,/N_DIMENSIONS) EQ 0) then begin
            code_path_took = 'CODE_PATH_ATTRIBUTE_TYPE_AND_BYTE_DIMENSION_ZERO';
            ; Some applications are unable to properly handle signed byte 
            ; values. If values are encountered > 127, please subtract 256 from this reported value
            value_as_int = FIX(attribute_value);
;print, 'get_netcdf_variable_attribute_info: INFO, attribute_type = ', attribute_type;
;print, 'get_netcdf_variable_attribute_info: INFO, attribute_value = ', attribute_value;
            if (value_as_int GT 127) then begin
                if (debug_flag) then begin
                    print, 'get_netcdf_variable_attribute_info: INFO, Subtracting 256 from ', value_as_int;
                endif
                attribute_value = value_as_int - 256;
                if (debug_flag) then begin
                    print, 'get_netcdf_variable_attribute_info: INFO, new attribute_value ', attribute_value;
                endif
            endif
            if (attribute_value EQ '') OR (attribute_value EQ 32) then begin
                ; This is an empty string, it is of type STRING
                o_attribute_info[index] = attribute_name + '|' + 'STRING'       + '|';
            endif else begin
                ; This is not an empty string but it is a byte, convert it to byte value and append 'b' at the end.
                o_attribute_info[index] = attribute_name + '|' + attribute_type + '|' + STRING(FIX(attribute_value),FORMAT='(I0)') + 'b';  Append 'b' to indicate that it is actually a byte.  Client code must parse for it.
            endelse
        endif else begin
            if (attribute_type EQ 'BYTE') then begin
                ; Further check to see if the attribute is of type CHAR.  That's a signal that it is a string.
                if (attribute_actual_data_type EQ 'CHAR') then begin
                    code_path_took = 'CODE_PATH_ATTRIBUTE_TYPE_BYTE_AND_ACTUAL_DATA_TYPE_IS_CHAR';
                    o_attribute_info[index] = attribute_name + '|' + 'STRING' + '|' + STRTRIM(STRING(attribute_value),2);
                endif else begin
                    ; These are an array of bytes, which we need to perform a conversion and add each with a comma.
                    ; Do an additional check to see if the value is an array of more than 1.
                    code_path_took = 'CODE_PATH_ATTRIBUTE_TYPE_BYTE_AND_ACTUAL_DATA_TYPE_NOT_CHAR';
                    num_elements_in_variable = SIZE(attribute_value,/N_ELEMENTS);
                    if (num_elements_in_variable GE 1) then begin
                        value_as_string = "";
                        for i = 0, N_ELEMENTS(attribute_value)-1 DO begin
                            if (i EQ 0) then begin
                                value_as_string = value_as_string + STRING(FIX(attribute_value[i]),FORMAT='(I0)') + 'b';        Must use this method of converting from Byte to String since the STRING() function of a byte does not wor
                            endif else begin
                                value_as_string = value_as_string + "," + STRING(FIX(attribute_value[i]),FORMAT='(I0)') + 'b';  Must use this method of converting from Byte to String since the STRING() function of a byte does not wor
                            endelse
                            if (debug_flag) then begin
                                print, 'get_netcdf_variable_attribute_info: i = ', i;
                                print, 'get_netcdf_variable_attribute_info: attribute_value = ', attribute_value[i];
                                print, 'get_netcdf_variable_attribute_info: STRING_VERSION attribute_value = [' + STRING(FIX(attribute_value[i]),FORMAT='(I0)') + 'b' + ']';
                                print, 'get_netcdf_variable_attribute_info: value_as_string = [', value_as_string , ']';
                            endif
                        endfor
                        o_attribute_info[index] = attribute_name + '|' + attribute_type + '|' + value_as_string;
                    endif
                endelse
            endif else begin
                code_path_took = 'CODE_PATH_ATTRIBUTE_TYPE_NOT_BYTE';
                ; Do an additional check to see if the value is an array of more than 1.
                num_elements_in_variable = SIZE(attribute_value,/N_ELEMENTS);
                if (num_elements_in_variable GE 1) then begin
                    value_as_string = "";
                    for i = 0, N_ELEMENTS(attribute_value)-1 DO begin
                        if (i EQ 0) then begin
                            value_as_string = value_as_string + STRTRIM(STRING(attribute_value[i]),2);
                        endif else begin
                            value_as_string = value_as_string + "," + STRTRIM(STRING(attribute_value[i]),2);
                        endelse
                        if (debug_flag) then begin
                            print, 'get_netcdf_variable_attribute_info: i = ', i;
                            print, 'get_netcdf_variable_attribute_info: attribute_value = ', attribute_value[i];
                            print, 'get_netcdf_variable_attribute_info: STRING_VERSION attribute_value = [' + STRTRIM(STRING(attribute_value[i]),2) + ']';
                                print, 'get_netcdf_variable_attribute_info: value_as_string = [', value_as_string , ']';
                        endif
                    endfor
                    o_attribute_info[index] = attribute_name + '|' + attribute_type + '|' + value_as_string;

                endif; end if (num_elements_in_variable GE 1)
            endelse; end else of if (attribute_type EQ 'BYTE')
        endelse;     end else of if (attribute_type EQ 'BYTE') AND (SIZE(attribute_value,/N_DIMENSIONS) EQ 0)

        if (debug_flag) then begin
            print, ' INDEX                   = ' , index;
            print, ' code_path_took          = ' + code_path_took;
            print, ' ***** o_attribute_info[index] = ' + o_attribute_info[index];
        endif

    endfor;          end for index = 0, num_attributes - 1 do
endif;               end if num_attributes gt 0 

; ---------- Close up shop ---------- 
return, o_read_status;
end
