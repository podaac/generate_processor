;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: lock_idl_license_manager.pro,v 1.1 2007/05/01 17:39:41 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CVS

FUNCTION lock_idl_license_manager

;tstart = systime(1)
;print, 'lock_idl_license_manager: execution start time:', systime() 

; Make a lock name.

l_lock_name = 'MY_IDL_SEMAPHORE_LOCK';

; Output variable.

r_grab_status = 1;  A return of 1 means the licenses are locked to the callee.  Zero is otherwise.

MAX_NUM_CREATE_ATTEMPTS = 20;
l_idl_create_attempt_number = 0;   
l_create_status    = 0;

while (l_idl_create_attempt_number LE MAX_NUM_CREATE_ATTEMPTS AND l_create_status EQ 0) do begin

    l_idl_create_attempt_number = l_idl_create_attempt_number + 1;

    ; Create a semaphore to lock the run-time licenses.

    l_create_status = SEM_CREATE(l_lock_name,/DESTROY_SEMAPHORE);

    ;
    ;  Loop again if cannot create the lock.
    ;

    if (l_create_status EQ 0) then begin
        print, 'lock_idl_license_manager: INFO, Cannot create a semaphore with name: ', l_lock_name;
        print, 'lock_idl_license_manager: l_idl_create_attempt_number = ', l_idl_create_attempt_number , ' out of ', MAX_NUM_CREATE_ATTEMPTS
        print, 'lock_idl_license_manager: waiting 2 seconds...';
        WAIT, 2
    end
endwhile

;
; Return immediately if can't create a semaphore.
;

if (l_create_status EQ 0) then begin
    print, 'lock_idl_license_manager: ERROR, Cannot create a semaphore with name: ', l_lock_name;
    print, 'lock_idl_license_manager: Must return without doing any work.'
    r_grab_status = 0;
    return, r_grab_status; 
end

if (l_create_status EQ 1) then begin
    print, 'lock_idl_license_manager: INFO, Created semaphore after tries: ', l_idl_create_attempt_number;
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Loop until able to retrieve the lock or run out of wait time.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MAX_NUM_LOCK_ATTEMPTS = 20;

l_idl_lock_attempt_number = 0;   
l_lock_status    = 0;

while (l_idl_lock_attempt_number LT MAX_NUM_LOCK_ATTEMPTS AND l_lock_status EQ 0) do begin

    ;
    ; Attempt to lock the semaphore
    ;

     l_lock_status = SEM_LOCK(l_lock_name);
     l_idl_lock_attempt_number += 1;

     print, 'release_idl_licenses: SEM_LOCK called, l_idl_lock_attempt_number:', l_idl_lock_attempt_number;

    ;
    ; If able to grab the lock, exit this while loop.
    ;

    if (l_lock_status EQ 0) then begin
        print, 'lock_idl_license_manager: WARNING, Cannot lock the semaphore with name: ', l_lock_name;
        print, 'lock_idl_license_manager: l_idl_lock_attempt_number = ', l_idl_lock_attempt_number, ' out of ', MAX_NUM_LOCK_ATTEMPTS
        print, 'lock_idl_license_manager: waiting 10 seconds...';
        WAIT, 10
    endif

endwhile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; End loop
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; Return immediately if cannot lock it after exhausting the lock attempts. 
;

if (l_lock_status EQ 0) then begin
    print, 'lock_idl_license_manager: ERROR, Cannot lock the semaphore with name: ', l_lock_name;
    print, 'lock_idl_license_manager: l_idl_lock_attempt_number = ', l_idl_lock_attempt_number 
    print, 'lock_idl_license_manager: Must return without doing any work.'
    r_grab_status = 0;
    return, r_grab_status; 
end

; If got to here, the locking was successful.

;
; Close up the shop
;

return, r_grab_status; 

END
