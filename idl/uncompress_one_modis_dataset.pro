;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: uncompress_one_modis_dataset.pro,v 1.1 2007/05/01 17:39:41 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

;
; Function uncompress on MODIS dataset from .bz2 to HDF format.
;
; Assumption:
;
;   1) The program bunzip2 can be found. 
;   2) The zipped file has the .bz2 extension.
;   3) The input name does not have the .bz2 extension.
; 
;------------------------------------------------------------------------------------------------

FUNCTION uncompress_one_modis_dataset, $
        i_uncompress_bzip_filename, $
        i_datafile_type, $
        i_out_filename

; Load constants.  No ending semicolon is required.

@modis_data_config.cfg

; Returned status.  Value of 0 means ok, 1 means bad.

over_all_status = SUCCESS;

; Local variable/constant:

ZIPPED_FILENAME_EXTENSION = ".bz2";

l_compressed_filename = "DUMMY";
result_uncompressed_filename = "DUMMY";

if (i_datafile_type EQ "MODIS_INPUT_DATA_FILE") then begin
    ; The name is just the uncompressed file plus the extension.
    l_compressed_filename = i_uncompress_bzip_filename + ZIPPED_FILENAME_EXTENSION;

    ; For MODIS_INPUT_DATA_FILE, the uncompressed file name is what we get
    ; from i_uncompress_bzip_filename

    result_uncompressed_filename = i_uncompress_bzip_filename;

endif else begin
    ; For Refined processing, the file we are trying to uncompress is the
    ; Filled Quicklook (which has the same name as the i_out_filename variable.

    ; Extract the directory from the input data file name.
    scratch_directory = FILE_DIRNAME(i_uncompress_bzip_filename);

    ; Extract the name only from the refined MODIS L2P
    filled_quick_name_only = FILE_BASENAME(i_out_filename); 

    ; Build the Filled Quicklook MODIS L2P filename.
    ; Assumption: the file has been uncompressed from BZ2 to .nc
    l_compressed_filename = scratch_directory + "/" + filled_quick_name_only + ZIPPED_FILENAME_EXTENSION;

    ; For MODIS_FILLED_QUICKLOOK, the resulting uncompressed file name is 
    ; the base name of i_out_filename in the scratch directory without the extension. 

    result_uncompressed_filename =  scratch_directory + "/" + filled_quick_name_only;

endelse

; With the new interface, the input file may come as uncompressed.
; If that is the case, we will merely perform a copy/move of the uncompressed file from
; its original location to our scratch area.
if (FILE_TEST(i_uncompress_bzip_filename)) then begin
    print, "uncompress_one_modis_dataset: INFO, file has been uncompressed already " + i_uncompress_bzip_filename;
    RETURN, over_all_status
endif

; Check to see if the file has already been uncompressed previously.  If true, there's nothing
; to do.  

if (FILE_TEST(result_uncompressed_filename)) then begin
    print, "uncompress_one_modis_dataset: INFO, file has been uncompressed already " + result_uncompressed_filename;
    RETURN, over_all_status
endif 

; Now we have the name of the file to perform the uncompression on.

;print, "uncompress_one_modis_dataset: INFO, " + i_datafile_type + " " + l_compressed_filename;

if (FILE_TEST(l_compressed_filename)) then begin
    ; Uncompress file with bunzip2.  New name will not have .bz2 extension.

    call_shell_command_str = "bunzip2 "  + l_compressed_filename;

;print,  "bunzip2 " + l_compressed_filename 
;print,  "call_shell_command_str = [" + call_shell_command_str+ "]";

    SPAWN, call_shell_command_str, compress_run_result, compress_run_error;

;help, compress_run_result, compress_run_error;

    run_result_string_size = STRLEN(compress_run_result[0]);
    run_error_string_size = STRLEN(compress_run_error[0])

;print,  "uncompress_one_modis_dataset: run_result_string_size = ", run_result_string_size 
;print,  "uncompress_one_modis_dataset: run_error_string_size  = ", run_error_string_size 

    ;
    ; Check for the string length of both parameters returned from SPAWN program.
    ; If both are zero, the command was a success.  If either one is non zero, there is an error.
    ;

    if (run_result_string_size NE 0 || run_error_string_size NE 0) then begin
        print, "uncompress_one_modis_dataset: Failed in uncompressing file: " + i_uncompress_bzip_filename;
        print, "uncompress_one_modis_dataset: compress_run_result[0] = " + compress_run_result[0]
        print, "uncompress_one_modis_dataset: compress_run_error[0]  = " + compress_run_error[0]
        over_all_status = FAILURE;
    endif
endif else begin
print, "uncompress_one_modis_dataset: INFO, file does not exist " + l_compressed_filename 
endelse

RETURN, over_all_status
END
