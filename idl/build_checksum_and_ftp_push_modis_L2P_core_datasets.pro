;  Copyright 2015, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id$
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM 

; Function build the checksum for the core file and ftp push one MODIS L2P Core dataset to PO.DAAC staging machine for
; QA and ingestion.  Note that this function is similar to compress_and_ftp_push_modis_L2P_core_datasets but does not perform any
; compression and is used primary when creating the GDS2 MODIS L2P core file.
;

FUNCTION build_checksum_and_ftp_push_modis_L2P_core_datasets, $
             i_l2p_core_filename,                       $
             i_L2P_registry,                            $
             i_processing_type,                         $
             i_compress_flag,                           $
             i_push_flag

    ; Load constants.  No ending semicolon is required.

    @modis_data_config.cfg

    routine_name = 'build_checksum_and_ftp_push_modis_L2P_core_datasets:';

    ; Get the DEBUG_MODE if it is set.

    debug_module = 'build_checksum_and_ftp_push_modis_L2P_core_datasets:';
    debug_mode = 0
    if (STRUPCASE(GETENV('GHRSST_MODIS_L2P_DEBUG_MODE')) EQ 'TRUE') then begin
        debug_mode = 1;
    endif

    ; Returned status.  Value of 0 means ok, 1 means bad.

    o_status = SUCCESS;

    ; Create a random number to use in creating file name.  Remove the leading and trailing spaces.

    random_number_suffix = STRTRIM(STRING(LONG(randomn(100000) * 100000)),2);
 
    ; Extract the name only without the directory.

    l_l2p_core_name_only = FILE_BASENAME(i_l2p_core_filename);
    directory_name       = FILE_DIRNAME(i_l2p_core_filename);

    ;
    ; Once the MODIS file is processed, use bzip2 to compress the files and ftp-pushed them.
    ; to PO.DAAC staging machine for QA and ingestions.
    ;

    call_md5_shell_command_str = "/usr/bin/md5sum ";

    l_l2p_core_filename = i_l2p_core_filename;
 
    if (debug_mode) then begin
        print, debug_module + 'l_l2p_core_name_only = ' + l_l2p_core_name_only;
        print, debug_module + 'l_l2p_core_filename  = ' + l_l2p_core_filename;
    endif

        md5sum_start_time = SYSTIME(/SECONDS);

        ;
        ; Perform the checksum on the L2P file.
        ;

        l_status = create_checksum_file($
             l_l2p_core_filename, $
             l2p_core_checksum);

        if (debug_mode) then begin
            print, debug_module + 'l2p_core_checksum    = ' + l2p_core_checksum;
            print, debug_module + 'i_push_flag          = ' + i_push_flag
        endif

        ; For GDS2, we don't create an MMR and an MMR checksum but we will need to set the names to dummy names.

        fr_checksum = "DUMMY_FR_CHECKSUM";
        fr_filename = "DUMMY_FR_FILENAME"; 

    if (i_push_flag EQ 'yes') then begin
        ;
        ; Now we begin the hard work of ftp'ing these files to melia for QA and eventual
        ; move to the FTP site.
        ;

        push_start_time = SYSTIME(/SECONDS);

        print, "  Pushing " + l_l2p_core_filename; 

        pusher_status  = 1;
        attempt_counts = 0;        

        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ; BEGIN_LOOP PUSH_LOOP: Loop 5 times to attempt to send the files to melia.
        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        MAX_PUSH_ATTEMPTS = 5;

        repeat begin
        pusher_status = modis_ftp_pusher(fr_checksum, $
                                       fr_filename, $
                                       l2p_core_checksum, $
                                       l_l2p_core_filename);

        attempt_counts = attempt_counts + 1;        

;        print, "    attempt_counts = ", attempt_counts;
;        print, "     pusher_status = ", pusher_status;
        endrep until ((attempt_counts GT MAX_PUSH_ATTEMPTS) OR $
                      (pusher_status EQ 0))

        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ; END_LOOP PUSH_LOOP: push files to melia. 
        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        push_total_time = SYSTIME(/SECONDS) - push_start_time;
        do_not_care = write_to_processing_log(FILE_BASENAME(i_l2p_core_filename),$
                                      (i_processing_type + "," + "PUSH_TOTAL_TIME: " + $
                                       STRING(push_total_time,FORMAT='(f0.2)')));

         ;
         ; If successful, append the L2P Core file name (without the directory) to the end of
         ; the L2P processed file registry.
         ;
         
;         pusher_status = 0;

         if (pusher_status EQ 0) then begin
             l_append_status = append_to_L2P_processed_file_registry($
                                   i_L2P_registry,l_l2p_core_name_only); 
             if (l_append_status NE 0) then begin 
                 print, "build_checksum_and_ftp_push_modis_L2P_core_datasets: Failed in function l_append_status()";
                 o_status = FAILURE;
                 return, o_status;
             endif 
         endif else begin
             ; If cannot push the files to melia for QA, we mark this function as failed
             ; and let the callee handle what to do with cleanup.

             l_reason = 'Error in modis_ftp_pusher for ' + FILE_BASENAME(i_l2p_core_filename);
             l_status = error_log_writer('build_checksum_and_ftp_push_modis_L2P_core_datasets',l_reason);
             o_status = FAILURE;

             ; Remove the 4 files related to this dataset.
             FILE_DELETE, fr_checksum,        /QUIET; 
             FILE_DELETE, fr_filename,        /QUIET; 
             FILE_DELETE, l2p_core_checksum,  /QUIET;
             FILE_DELETE, l_l2p_core_filename,/QUIET;
         endelse

    endif else begin
         ; If the file was not push, we can still append to the registry.
         l_append_status = append_to_L2P_processed_file_registry($
                                   i_L2P_registry,l_l2p_core_name_only); 
         if (l_append_status NE 0) then begin
             print, "build_checksum_and_ftp_push_modis_L2P_core_datasets: Failed in function l_append_status()";
             o_status = FAILURE;
             return, o_status;
         endif
    endelse      

return, o_status;

END
