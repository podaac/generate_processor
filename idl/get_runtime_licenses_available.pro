;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: get_runtime_licenses_available.pro,v 1.2 2007/09/19 20:46:58 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CVS

FUNCTION get_runtime_licenses_available

; Function returns the number of IDL run time licenses available in the system at the current
; time.
;
; It will loop as many times as defined in MAX_NUM_LOCK_ATTEMPTS at the number of seconds
; per wait in SUSPEND_DURATION_PER_LOCK_ATTEMPT constant.
;
; The rationale is if the licenses are not available immediately, some will be within a few minutes.
; These "wait" values may be best be placed in a configuration file.

;
; Returned variable.
;

SUCCESS = 0;
FAILURE = 1;

over_all_status = SUCCESS;

r_actual_runtime_licenses_available = 0;   Start being an pessimist.

;
; Lock the IDL license manager first.
;

l_grab_status = lock_idl_license_manager();

if (l_grab_status NE 1) then begin
    print, 'get_runtime_licenses_available: ERROR, Cannot lock the IDL license manager.';
    print, 'get_runtime_licenses_available: Must return without doing any work.'
    over_all_status = FAILURE;
    ;exit;
    return, r_actual_runtime_licenses_available; 
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Loop until able to get at least one runtime license or run out of wait time.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MAX_NUM_LOCK_ATTEMPTS             = 1; loop max
SUSPEND_DURATION_PER_LOCK_ATTEMPT = 10; in seconds

l_runtime_license_attempt_number = 0;

while (l_runtime_license_attempt_number LT MAX_NUM_LOCK_ATTEMPTS AND r_actual_runtime_licenses_available LE 0) do begin

    ;
    ; Get the number of IDL run time licenses available from the operating system.
    ;

    l_runtime_license_attempt_number += 1;  Keep track of how many times in this loop.

    r_actual_runtime_licenses_available = how_many_runtime_licenses_available();

    ;
    ; If found at least one run time license available, exit this while loop. Otherwise wait
    ; and loop again.
    ;

    if (r_actual_runtime_licenses_available LE 0) then begin
        print, 'get_runtime_licenses_available: WARNING, No runtime licenses are available.';
        print, 'get_runtime_licenses_available: l_runtime_license_attempt_number = ', l_runtime_license_attempt_number, ' out of ', MAX_NUM_LOCK_ATTEMPTS
        print, 'get_runtime_licenses_available: waiting ', SUSPEND_DURATION_PER_LOCK_ATTEMPT, ' seconds...';
        WAIT, SUSPEND_DURATION_PER_LOCK_ATTEMPT;
    endif 

endwhile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; End loop
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; Display warning message if there are no more run time licenses available after going through
; all the exhausting waits.
;

if (r_actual_runtime_licenses_available LE 0) then begin
    print, 'get_runtime_licenses_available: WARNING, There are no run time licenses available.'
    print, 'get_runtime_licenses_available: r_actual_runtime_licenses_available = ', r_actual_runtime_licenses_available
    over_all_status = FAILURE;
    exit; 
end

;
; Close up the shop: 
;
; Release the IDL license manager.  It must be locked again if the value of
;   r_actual_runtime_licenses_available is to be used.
;

release_idl_license_manager

return, r_actual_runtime_licenses_available;
END
