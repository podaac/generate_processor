;  Copyright 2007, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id: create_unique_links_to_modis_l2p_files.pro,v 1.2 2007/07/06 17:08:10 qchau Exp $
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

;
;
; Function create unique links to newly created MODIS L2P files.  This function is used to shorten
; the file names because the Unix command line has an upper limit to how long a command can be.
;
; Assummption:
;
;   1.  The MODIS L2P file exists.
;
;
;------------------------------------------------------------------------------------------------

FUNCTION  create_unique_links_to_modis_l2p_files, $
             i_scratch_area,$
             i_fr_checksum, $
             i_fr_filename, $
             i_l2p_core_checksum, $
             i_l2p_core_filename, $
             r_link_to_fr_checksum, $
             r_link_to_fr_filename, $
             r_link_to_l2p_core_checksum, $
             r_link_to_l2p_core_filename

; returned variables

r_over_all_status = 0;

;
;  
;  Create links to the above 4 input files to shorten the names.  The system command in Perl
;  has an upper limit of the size of the command.
;  
;

; Create a random number to use in creating file name.  Remove the leading and trailing spaces.

;PRODUCT_FACTOR = 1000000L;
;ADD_FACTOR_1      = 20000;

;--------------------------------------------------------------------------------------------------
; Loop until able to find a link to a file that was not created already. 
;--------------------------------------------------------------------------------------------------

created_link_successfully = 0;
MAX_NUM_LINK_CREATION_TRIES = 100;
num_tries = 0;

while (~(created_link_successfully) AND (num_tries LT MAX_NUM_LINK_CREATION_TRIES)) do begin

;print, 'create_unique_links_to_modis_l2p_files: num_tries = ', num_tries 

  ;
  ; The unique 32 characters string is based on the current time.  A change of 1 second will
  ; change the value.  This looping allows the function to get indeed a unique string.
  ;

  random_suffix = get_unique_md5_string(); 

  r_link_to_fr_checksum       = i_scratch_area + "/tmp_L1_" + random_suffix;
  r_link_to_fr_filename       = i_scratch_area + "/tmp_L2_" + random_suffix;
  r_link_to_l2p_core_checksum = i_scratch_area + "/tmp_L3_" + random_suffix;
  r_link_to_l2p_core_filename = i_scratch_area + "/tmp_L4_" + random_suffix;

;print, 'create_unique_links_to_modis_l2p_files: r_link_to_fr_checksum = ', r_link_to_fr_checksum 
;print, 'create_unique_links_to_modis_l2p_files: r_link_to_fr_filename = ', r_link_to_fr_filename 
;print, 'create_unique_links_to_modis_l2p_files: r_link_to_l2p_core_checksum = ', r_link_to_l2p_core_checksum 
;print, 'create_unique_links_to_modis_l2p_files: r_link_to_l2p_core_filename = ', r_link_to_l2p_core_filename 

  ;
  ; Check for existence of each link.  If not, go ahead and create the links.
  ; 

  successfully_created_link1 = 0;
  successfully_created_link2 = 0;
  successfully_created_link3 = 0;
  successfully_created_link4 = 0;

;print, 'create_unique_links_to_modis_l2p_files: random_suffix = ', random_suffix
  if ~FILE_TEST(r_link_to_fr_checksum) then begin
    system_command_string = "ln -s " + i_fr_checksum + " " + r_link_to_fr_checksum;
;print, "create_unique_links_to_modis_l2p_files : system_command_string = [" + system_command_string + "]"
    SPAWN, system_command_string, run_result, error_result; 
;print, "create_unique_links_to_modis_l2p_files : run_result = [" + run_result + "]"
    if (STRLEN(error_result[0]) GT 0) then begin 
        num_tries = num_tries + 1; 
        continue;
    endif else begin
       successfully_created_link1 = 1;
    endelse 
  endif else begin
     num_tries = num_tries + 1; 
     continue;
  endelse

  if ~FILE_TEST(r_link_to_fr_filename) then begin
    system_command_string = "ln -s " + i_fr_filename + " " + r_link_to_fr_filename;
;print, "create_unique_links_to_modis_l2p_files : system_command_string = [" + system_command_string + "]"
    SPAWN,  system_command_string, run_result, error_result;
;print, "create_unique_links_to_modis_l2p_files : run_result = [" + run_result + "]"
    if (STRLEN(error_result[0]) GT 0) then begin 
        num_tries = num_tries + 1; 
        continue;
    endif else begin
       successfully_created_link2 = 1;
    endelse 
  endif else begin
     num_tries = num_tries + 1; 
     continue;
  endelse

  if ~FILE_TEST(r_link_to_l2p_core_checksum) then begin
    system_command_string = "ln -s " + i_l2p_core_checksum + " " + r_link_to_l2p_core_checksum;
;print, "create_unique_links_to_modis_l2p_files : system_command_string = [" + system_command_string + "]"
    SPAWN, system_command_string, run_result, error_result; 
;print, "create_unique_links_to_modis_l2p_files : run_result = [" + run_result + "]"
    if (STRLEN(error_result[0]) GT 0) then begin 
        num_tries = num_tries + 1; 
        continue;
    endif else begin
       successfully_created_link3 = 1;
    endelse 
  endif else begin
     num_tries = num_tries + 1; 
     continue;
  endelse

  if ~FILE_TEST(r_link_to_l2p_core_filename) then begin
    system_command_string = "ln -s " + i_l2p_core_filename + " " + r_link_to_l2p_core_filename; 
;print, "create_unique_links_to_modis_l2p_files : system_command_string = [" + system_command_string + "]"
    SPAWN, system_command_string, run_result, error_result; 
;print, "create_unique_links_to_modis_l2p_files : run_result = [" + run_result + "]"
    if (STRLEN(error_result[0]) GT 0) then begin 
        num_tries = num_tries + 1; 
        continue;
    endif else begin
       successfully_created_link4 = 1;
    endelse 
  endif else begin
     num_tries = num_tries + 1; 
     continue;
  endelse

  ;
  ; We only consider the links created successfully if all the links were made.
  ;

  if (successfully_created_link1 EQ 1 AND successfully_created_link2 EQ 1) AND (successfully_created_link3 EQ 1 AND successfully_created_link4 EQ 1) then begin
    created_link_successfully = 1;
  endif 

endwhile
;--------------------------------------------------------------------------------------------------
; End loop
;--------------------------------------------------------------------------------------------------

; Set the status if cannot create the link.

if ~created_link_successfully then begin
   r_over_all_status = 1;
endif

return, r_over_all_status;
END
