;  Copyright 2015, by the California Institute of Technology.  ALL RIGHTS
;  RESERVED. United States Government Sponsorship acknowledged. Any commercial
;  use must be negotiated with the Office of Technology Transfer at the
;  California Institute of Technology.
;
; $Id$
; DO NOT EDIT THE LINE ABOVE - IT IS AUTOMATICALLY GENERATED BY CM

FUNCTION append_ancillary_data_variable_gds2, $
         i_filled_quicklook_filename, $
         i_variable_name, $
         i_refined_filename, $
         i_day_or_night, $
         i_start_node, $
         i_end_node

; Function read one variable from the filled Quicklook MODIS L2P in GDS2 format and write it to the
; "newly" created Refined MODIS L2P file along with all its attributes.
;
; The variable represents ancillary data such as: 
;
;     aerosol_optical_depth
;     dt_analysis
;     sea_ice_fraction
;     surface_solar_irradiance
;     wind_speed
;
; Assumptions:
;
;   1. The input NetCDF file exist (filled Quicklook MODIS L2P).
;   2. The output NetCDF file exist.   The content of the Refined MODIS L2P has mostly
;      been written except for the ancillary data being added by this function.
;   3. The global attribute 'comment' will be replaced.
;   4. The variable type is byte.
;   5. The variable has not been written before.  If it is, we will not write it again.
;
;------------------------------------------------------------------------------------------------

; Load constants.

@data_const_config.cfg

; Define returned variable(s).

o_status = SUCCESS;

; Get the DEBUG_MODE if it is set.
;append_ancillary_data_variable_gds2
debug_module = 'append_ancillary_data_variable_gds2:';
debug_mode = 0
if (STRUPCASE(GETENV('GHRSST_MODIS_L2P_DEBUG_MODE')) EQ 'TRUE') then begin
    debug_mode = 1; 
endif

; Check to see if the compression is suppressed.  If it on by default.

compression_flag = 1; By default, we will use the compression chunking if possible.
if (STRUPCASE(GETENV('GHRSST_MODIS_L2P_CHUNKING_SUPPRESS')) EQ 'TRUE') then begin
    compression_flag = 0;
endif

; Check to see if the GZIP compression level is set.  It is default to 5.

compression_level = 5;
if (STRUPCASE(GETENV('GHRSST_MODIS_L2P_CHUNKING_COMPRESSION_LEVEL')) NE '') then begin
    compression_level = FIX(GETENV('GHRSST_MODIS_L2P_CHUNKING_COMPRESSION_LEVEL'));
endif

;
; Open the Filled MODIS NetCDF file as input. 
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot open file for input ' + i_filled_quicklook_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_filled_quicklook_file_id= NCDF_OPEN(i_filled_quicklook_filename,/NOWRITE);
CATCH, /CANCEL

;
; Return immediately if the ancillary variable does not exist.
;
l_variable_id = NCDF_VARID(l_filled_quicklook_file_id, i_variable_name);
CATCH, /CANCEL

if (l_variable_id EQ -1) then begin
    print, 'append_ancillary_data_variable_gds2: INFO, Variable name does not exist: [' + i_variable_name + ']' + ' in file ' + i_filled_quicklook_filename;
;    print, 'append_ancillary_data_variable_gds2: Variable will not be appended.';

;    print, STRING('i_filled_quicklook_filename = ' + i_filled_quicklook_filename);

    ; Don't forget to close the opened file. 
    NCDF_CLOSE, l_filled_quicklook_file_id
    CATCH, /CANCEL
;print, 'append_ancillary_data_variable_gds2: closing l_filled_quicklook_file_id = ', l_filled_quicklook_file_id 

    o_status = SUCCESS;
    ; Must return immediately.
    return, o_status
endif

;
; Continue as normal.
;

;
; Open NetCDF file for update. 
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot open file for update ' + i_refined_filename;

    ; Don't forget to close the opened input file. 
    NCDF_CLOSE, l_filled_quicklook_file_id
    CATCH, /CANCEL
;print, 'append_ancillary_data_variable_gds2: closing l_filled_quicklook_file_id = ', l_filled_quicklook_file_id

    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_refined_file_id = NCDF_OPEN(i_refined_filename,/WRITE);
CATCH, /CANCEL

;
; To prevent the variable from being written to the output file more than once, we
; check to make sure the variable does not exist already in the file.  NetCDF returns -1 if
; it does not exist.  This is what we want to get.  If it exist already, we close
; the input and output files and return.
;

l_variable_id = NCDF_VARID(l_refined_file_id, i_variable_name);
CATCH, /CANCEL

;l_variable_id = 1; TODO: Force the code to exit;

;print, 'append_ancillary_data_variable_gds2: l_variable_id = ', l_variable_id
if (l_variable_id EQ -1) then begin
;    print, 'append_ancillary_data_variable_gds2: INFO, Variable name does not exist yet: [', i_variable_name, ']';
;    print, 'append_ancillary_data_variable_gds2: Variable can be appended.';
endif else begin
    print, 'append_ancillary_data_variable_gds2: ERROR, Variable name ' + i_variable_name + ' has been written before to file ' + i_refined_filename;
;    print, 'append_ancillary_data_variable_gds2: Variable will not be appended.';

    o_status = FAILURE;

    ; Don't forget to close the opened input file.
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable_gds2: ERROR, Cannot close input file ' + i_filled_quicklook_filename;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status
    endif

    NCDF_CLOSE, l_filled_quicklook_file_id;
    CATCH, /CANCEL

    ; Don't forget to close the opened output file.
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable_gds2: ERROR, Cannot close output file ' + i_refined_filename;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status
    endif
    NCDF_CLOSE, l_refined_file_id;
    CATCH, /CANCEL

    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endelse

; Get the variable ids of nj, ni and time.

l_nj_dim_id   = NCDF_DIMID(l_refined_file_id,'nj');
l_ni_dim_id   = NCDF_DIMID(l_refined_file_id,'ni');
l_time_dim_id = NCDF_DIMID(l_refined_file_id,'time');

;
; Put output file into define mode for writing:
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot set output file ' + i_refined_filename + ' into define mode.';
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
NCDF_CONTROL, l_refined_file_id, /REDEF
CATCH, /CANCEL

;
; Define the output variable for writing.
;
;CATCH, error_status
;if (error_status NE 0) then begin
;    CATCH, /CANCEL
;    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot define output variable: ',i_variable_name;
;    o_status = FAILURE;
;    ; Must return immediately.
;    return, o_status
;endif
;l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /BYTE)
;CATCH, /CANCEL
;
;help, l_refined_file_id;
;help, i_variable_name
;help, l_ni_dim_id;
;help, l_nj_dim_id;
;help, l_time_dim_id;
;help, l_refined_varid;

;
; Get the input variable id.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot retrieve dataset id for dataset. Name = ', i_variable_name;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
l_variable_id = NCDF_VARID(l_filled_quicklook_file_id, i_variable_name);
CATCH, /CANCEL

;
; Get the input variable array. 
;
CATCH, error_status
if (error_status NE 0) then begin
     CATCH, /CANCEL
     print, 'append_ancillary_data_variable_gds2: ERROR, Cannot retrieve dataset from input file.'
     print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
     o_status = FAILURE;
     ; Must return immediately.
     return, o_status;
endif
NCDF_VARGET, l_filled_quicklook_file_id, l_variable_id,  variable_array;
CATCH, /CANCEL
;help, variable_array

CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Function NCDF_DIMINQ failed for lat, lon and time ids in file ' + i_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif

; Get the dimension sizes so we can pass it onto NCDF_VARDEF function.

NCDF_DIMINQ, l_refined_file_id, l_nj_dim_id,  lat_variable_name,  lat_size;
NCDF_DIMINQ, l_refined_file_id, l_ni_dim_id,  lon_variable_name,  lon_size;
NCDF_DIMINQ, l_refined_file_id, l_time_dim_id,time_variable_name, time_size;
CATCH, /CANCEL

; Set the chunk_dimension_vector to pass it onto NCDF_VARDEF function for the infile compression.

chunk_dimension_vector = [lon_size,lat_size,1]

;
; Define the output variable for writing.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot define output variable ' + i_variable_name + ' of type ' + variable_type + ' in file ' + i_refined_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif

variable_type = SIZE(variable_array,/TNAME);

;help, lon_size;
;help, lat_size;
;help, chunk_dimension_vector;
;help, variable_array;
;
;stop;

;variable_type = 'INT';
;variable_type = 'LONG';
;variable_type = 'FLOAT';
;variable_type = 'DOUBLE';
;variable_type = 'UNKNOWN';
CASE variable_type OF
   'BYTE':  BEGIN
            if (compression_flag) then begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /BYTE, GZIP=compression_level, CHUNK_DIMENSIONS=chunk_dimension_vector);
            endif else begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /BYTE);
            endelse
            CATCH, /CANCEL
            END
   'INT' :  BEGIN
            if (compression_flag) then begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /SHORT, GZIP=compression_level, CHUNK_DIMENSIONS=chunk_dimension_vector);
            endif else begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /SHORT);
            endelse
            CATCH, /CANCEL
            END
   'LONG':  BEGIN
            if (compression_flag) then begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /LONG, GZIP=compression_level, CHUNK_DIMENSIONS=chunk_dimension_vector);
            endif else begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /LONG);
            endelse
                CATCH, /CANCEL
            END
   'FLOAT': BEGIN
            if (compression_flag) then begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /FLOAT, GZIP=compression_level, CHUNK_DIMENSIONS=chunk_dimension_vector);
            endif else begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /FLOAT);
            endelse
            CATCH, /CANCEL
            END
   'DOUBLE':BEGIN
            if (compression_flag) then begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /DOUBLE, GZIP=compression_level, CHUNK_DIMENSIONS=chunk_dimension_vector);
            endif else begin
                l_refined_varid = NCDF_VARDEF(l_refined_file_id, i_variable_name, [l_ni_dim_id, l_nj_dim_id, l_time_dim_id], /DOUBLE);
            endelse
            CATCH, /CANCEL
            END
   ELSE: BEGIN
             PRINT, 'append_ancillary_data_variable_gds2: This function does not support writing this variable type ' + variable_type + ' of variable ' + i_variable_name;
             o_status = FAILURE;
             NCDF_CLOSE, l_filled_quicklook_file_id;
             NCDF_CLOSE, l_refined_file_id;
             ; Must return immediately.
             return, o_status;
         END
ENDCASE

;help, variable_type;
;help, l_refined_file_id;
;help, i_variable_name
;help, l_ni_dim_id;
;help, l_nj_dim_id;
;help, l_time_dim_id;
;help, l_refined_varid;
;stop;


;
; Get all the accompanying attributes.
;
CATCH, error_status
if (error_status NE 0) then begin
     CATCH, /CANCEL
     print, 'append_ancillary_data_variable_gds2: ERROR, Cannot retrieve attribute structure.'
     print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
     o_status = FAILURE;
     ; Must return immediately.
     return, o_status;
endif

;
; Get the number of attributes from the filled Quicklook MODIS L2P variable.
;

variable_info_structure = NCDF_VARINQ(l_filled_quicklook_file_id, l_variable_id);
CATCH, /CANCEL
l_num_attributes = variable_info_structure.natts

;print, 'append_ancillary_data_variable_gds2: l_num_attributes = ', l_num_attributes;
    
;
; Get each variable attribute name/value and write it to file. 
;

for attribute_index = 0, l_num_attributes - 1 do begin

    ;
    ; Load the attribute name in attribute name array;
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_ATTNAME()'
        print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable_gds2: attribute_index = ', attribute_index;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    l_attribute_name = NCDF_ATTNAME(l_filled_quicklook_file_id, l_variable_id, attribute_index);
    CATCH, /CANCEL


    ;
    ;Get the attribute value.
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_ATTGET()'
        print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable_gds2: attribute_index = ', attribute_index;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    NCDF_ATTGET, l_filled_quicklook_file_id, l_variable_id, l_attribute_name, l_attribute_value;
    CATCH, /CANCEL
;print, 'append_ancillary_data_variable_gds2: l_attribute_name  = ', l_attribute_name;
;print, 'append_ancillary_data_variable_gds2: l_attribute_value = [', l_attribute_name, ']', ' ATTRIBUTE_TYPE ', SIZE(l_attribute_value,/TNAME);

    ;
    ; Inquire about the file attribute name and types.
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_ATTINQ()'
        print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable_gds2: attribute_index = ', attribute_index;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif
    result = NCDF_ATTINQ(l_filled_quicklook_file_id, l_variable_id, l_attribute_name)
    CATCH, /CANCEL

    ; Convert the CHAR attribute to STRING before writing.  NetCDF stores STRING variables
    ; as a series of bytes.
     ;
    ; Other data types are left as is. 
 
    if (result.DataType eq "CHAR") then begin
        l_attribute_value = STRING(l_attribute_value);
    endif else begin
;        print, 'append_ancillary_data_variable_gds2: result.DataType = [',result.DataType,'] l_attribute_name = [',l_attribute_name,']'
    endelse

    ;
    ; Write the variable attribute to Refined MODIS L2P file.
    ;
    CATCH, error_status
    if (error_status NE 0) then begin
        CATCH, /CANCEL
        print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_ATTPUT()'
        print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
        print, 'append_ancillary_data_variable_gds2: attribute_index = ', attribute_index;
        print, 'append_ancillary_data_variable_gds2: l_attribute_name  = ', l_attribute_name;
        print, 'append_ancillary_data_variable_gds2: l_attribute_value = ', l_attribute_value;
        o_status = FAILURE;
        ; Must return immediately.
        return, o_status;
    endif

    ; IDL is quirky in that the _FillValue, valid_min, or valid_max attributes must match the type of the variable type.
    if ((l_attribute_name EQ '_FillValue') OR  $
        (l_attribute_name EQ 'valid_min')  OR  $
        (l_attribute_name EQ 'valid_max')) then begin
        CASE variable_type OF
           'BYTE':   NCDF_ATTPUT, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value, /BYTE;
           'INT' :   NCDF_ATTPUT, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value, /SHORT;
           'LONG':   NCDF_ATTPUT, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value, /LONG;
           'FLOAT':  NCDF_ATTPUT, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value, /FLOAT;
           'DOUBLE': NCDF_ATTPUT, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value, /DOUBLE;
        ENDCASE
    endif else begin
         NCDF_ATTPUT, l_refined_file_id, l_refined_varid, l_attribute_name, l_attribute_value;
    endelse
    CATCH, /CANCEL
endfor

;
; Changed file mode for writing an output variable.
;
CATCH, error_status
if (error_status NE 0) then begin
   CATCH, /CANCEL
   print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_CONTROL /ENDEF for writing variable ' + i_variable_name + ' to file ' + i_refined_filename;
   o_status = FAILURE;
   ; Must return immediately.
   return, o_status;
endif
NCDF_CONTROL, l_refined_file_id, /ENDEF
CATCH, /CANCEL

;
; Write the output variable to output file.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_VARPUT()'
    print, 'append_ancillary_data_variable_gds2: i_variable_name = ', i_variable_name;
    print, 'append_ancillary_data_variable_gds2: l_refined_file_id = ', l_refined_file_id;
    print, 'append_ancillary_data_variable_gds2: l_refined_varid = ', l_refined_varid 
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status;
endif
print, 'append_ancillary_data_variable_gds2: INFO, Writing variable ' + i_variable_name + ' of type ' + variable_type + ' to file ' + i_refined_filename;


CASE variable_type OF
   'BYTE':   NCDF_VARPUT, l_refined_file_id, l_refined_varid, BYTE(variable_array);
   'INT' :   NCDF_VARPUT, l_refined_file_id, l_refined_varid, FIX(variable_array);
   'LONG':   NCDF_VARPUT, l_refined_file_id, l_refined_varid, LONG(variable_array);
   'FLOAT':  NCDF_VARPUT, l_refined_file_id, l_refined_varid, FLOAT(variable_array);
   'DOUBLE': NCDF_VARPUT, l_refined_file_id, l_refined_varid, DOUBLE(variable_array);
ENDCASE
CATCH, /CANCEL

;
; Put output file into define mode for writing global attribute.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Failed in NCDF_CONTROL,/ REDEF to put output file into define mode:' + i_refined_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
NCDF_CONTROL, l_refined_file_id, /REDEF
CATCH, /CANCEL

;
; Build the global comment attribute.
;
l_warning = "; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value";

l_refined_comment = 'L2P Core with DT analysis and other ancillary fields';

l_comment = l_refined_comment + "; " + i_day_or_night + ', Start Node:' + i_start_node $
          + ', End Node:' $
          + i_end_node + l_warning + "; Refined" ;

;
; Update the comment global attribute.
;
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR,  Cannot write global attribute comment.' 
    print, 'append_ancillary_data_variable_gds2: i_variable_name   = ', i_variable_name;
    print, 'append_ancillary_data_variable_gds2: l_refined_file_id = ', l_refined_file_id;
    print, 'append_ancillary_data_variable_gds2: l_refined_varid   = ', l_refined_varid
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status;
endif
NCDF_ATTPUT, l_refined_file_id, /GLOBAL, 'comment', l_comment;
CATCH, /CANCEL

; ---------- Close up shop ---------- 

; Don't forget to close the opened input file.
CATCH, error_status
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot close input file ' + i_filled_quicklook_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
NCDF_CLOSE, l_filled_quicklook_file_id;
CATCH, /CANCEL

; Don't forget to close the opened output file.
if (error_status NE 0) then begin
    CATCH, /CANCEL
    print, 'append_ancillary_data_variable_gds2: ERROR, Cannot close output file ' + i_refined_filename;
    o_status = FAILURE;
    ; Must return immediately.
    return, o_status
endif
NCDF_CLOSE, l_refined_file_id;
return, o_status
END
